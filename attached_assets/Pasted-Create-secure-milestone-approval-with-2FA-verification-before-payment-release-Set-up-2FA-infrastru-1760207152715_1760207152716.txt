Create secure milestone approval with 2FA verification before payment release:

Set up 2FA infrastructure at /lib/auth/two-factor:

typescript   import { authenticator } from 'otplib';
   import { createTransport } from 'nodemailer';
   
   // Generate and send OTP
   export async function sendPaymentOTP(userId: string, amount: number) {
     const otp = Math.floor(100000 + Math.random() * 900000).toString();
     const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes
     
     // Store OTP in database
     await db.paymentOTP.create({
       userId,
       code: await hashOTP(otp),
       amount,
       expiresAt,
       used: false
     });
     
     // Send via email/SMS
     await sendEmail(user.email, 'Payment Approval Code', {
       code: otp,
       amount: formatCurrency(amount),
       validFor: '10 minutes',
       warning: 'Do not share this code with anyone'
     });
     
     return { sent: true, expiresAt };
   }

Update client approval interface at /app/client/milestones/[id]/approve:

typescript   // Step 1: Review and initial approval
   <ApprovalStep1>
     <MilestoneDetails />
     <PaymentPreview amount={milestone.amount} method={paymentMethod} />
     <Button onClick={initiateApproval}>
       Approve & Continue to Payment ($X)
     </Button>
   </ApprovalStep1>
   
   // Step 2: 2FA verification
   <ApprovalStep2>
     <Alert>
       <Shield className="w-5 h-5" />
       Payment Security Verification Required
     </Alert>
     <p>We've sent a 6-digit code to {user.email}</p>
     <OTPInput 
       length={6}
       onComplete={handleOTPSubmit}
     />
     <p className="text-sm">Code expires in {timeRemaining}</p>
     <Button variant="ghost" onClick={resendCode}>
       Resend Code
     </Button>
   </ApprovalStep2>

2FA verification API at /api/milestones/verify-and-pay:

typescript   export async function POST(req: Request) {
     const { milestoneId, otpCode } = await req.json();
     const userId = await getUserId(req);
     
     // Verify OTP
     const validOTP = await verifyPaymentOTP(userId, otpCode, milestone.amount);
     if (!validOTP) {
       return NextResponse.json({ 
         error: 'Invalid or expired code' 
       }, { status: 400 });
     }
     
     // Check authorization still valid
     const auth = await getActiveAuthorization(milestone.contractId);
     if (!auth) {
       return NextResponse.json({ 
         error: 'Payment authorization expired' 
       }, { status: 400 });
     }
     
     // Process payment
     try {
       const payment = await processAuthorizedPayment(milestone, auth);
       
       // Log successful 2FA verification
       await logSecurityEvent({
         type: 'payment_2fa_success',
         userId,
         milestoneId,
         amount: milestone.amount,
         timestamp: new Date()
       });
       
       return NextResponse.json({ 
         success: true, 
         paymentId: payment.id 
       });
     } catch (error) {
       // Log failed attempt
       await logSecurityEvent({
         type: 'payment_2fa_failed',
         userId,
         milestoneId,
         error: error.message
       });
       throw error;
     }
   }

Enhanced 2FA options at /app/dashboard/security:

typescript   // Client security settings
   <SecuritySettings>
     <Section title="Payment Security">
       <Toggle 
         label="Require 2FA for all payment approvals"
         checked={require2FA}
         onChange={updateSecurity}
       />
       
       <Select 
         label="2FA Method"
         value={tfaMethod}
         options={[
           { value: 'email', label: 'Email Code' },
           { value: 'sms', label: 'SMS Code' },
           { value: 'authenticator', label: 'Authenticator App' }
         ]}
       />
       
       <NumberInput
         label="2FA threshold (optional)"
         value={tfaThreshold}
         placeholder="Only require 2FA for payments above $"
         min={0}
       />
     </Section>
   </SecuritySettings>

SMS 2FA implementation (optional):

typescript   import twilio from 'twilio';
   
   export async function sendSMSOTP(phone: string, otp: string) {
     const client = twilio(
       process.env.TWILIO_ACCOUNT_SID,
       process.env.TWILIO_AUTH_TOKEN
     );
     
     await client.messages.create({
       body: `Your SmartFlo payment approval code is: ${otp}. Valid for 10 minutes.`,
       to: phone,
       from: process.env.TWILIO_PHONE_NUMBER
     });
   }

Authenticator app support:

typescript   // Generate QR code for TOTP setup
   export async function setupAuthenticator(userId: string) {
     const secret = authenticator.generateSecret();
     const otpauth = authenticator.keyuri(
       user.email,
       'SmartFlo Payments',
       secret
     );
     
     // Store encrypted secret
     await db.user.update({
       where: { id: userId },
       data: { 
         totpSecret: await encrypt(secret),
         totpEnabled: false // Enable after verification
       }
     });
     
     // Generate QR code
     const qrCode = await QRCode.toDataURL(otpauth);
     return { qrCode, secret };
   }

Rate limiting and security:

typescript   // Prevent brute force attempts
   const rateLimiter = new RateLimiter({
     windowMs: 15 * 60 * 1000, // 15 minutes
     max: 5, // 5 attempts
     message: 'Too many attempts. Please try again later.'
   });
   
   // Apply to OTP verification endpoint
   app.use('/api/milestones/verify-and-pay', rateLimiter);
   
   // Lock after failed attempts
   if (failedAttempts >= 3) {
     await lockAccount(userId, '30 minutes');
     await sendSecurityAlert(user.email, 'Account locked due to failed payment attempts');
   }

2FA bypass for trusted devices (optional):

typescript   // Remember device for 30 days
   export async function trustDevice(userId: string, deviceId: string) {
     const deviceFingerprint = await generateDeviceFingerprint(req);
     
     await db.trustedDevices.create({
       userId,
       deviceId,
       fingerprint: deviceFingerprint,
       trustedUntil: addDays(new Date(), 30),
       lastUsed: new Date()
     });
     
     // Set secure cookie
     setCookie('trusted_device', deviceId, {
       httpOnly: true,
       secure: true,
       sameSite: 'strict',
       maxAge: 30 * 24 * 60 * 60 * 1000 // 30 days
     });
   }

Emergency 2FA recovery:

typescript   // Generate recovery codes on 2FA setup
   export async function generateRecoveryCodes(userId: string) {
     const codes = Array.from({ length: 10 }, () => 
       crypto.randomBytes(4).toString('hex').toUpperCase()
     );
     
     // Store hashed codes
     await db.recoveryCodes.createMany({
       data: codes.map(code => ({
         userId,
         code: hashSync(code, 10),
         used: false
       }))
     });
     
     return codes; // Show once to user
   }